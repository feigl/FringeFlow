########## 1. load_data
##---------add attributes manually
## MintPy requires attributes listed at: https://mintpy.readthedocs.io/en/latest/api/attributes/
## Missing attributes can be added below manually (uncomment #), e.g.
# ORBIT_DIRECTION = ascending
PLATFORM 		=    SENTINEL-1A,SENTINEL-1B 
PROJECT_NAME		=    SANEM_V1_
ISCE_VERSION            =    2.4.2
##------------------------------- ISCE/topsStack ----------------------##
#ssaraopt = --platform=SENTINEL-1A,SENTINEL-1B 
##-------------------------------- MintPy -----------------------------##
########## 1. Load Data (--load to exit after this step)
## load_data.py -H to check more details and example inputs.
mintpy.load.processor        = isce
mintpy.load.compression      = no  #[gzip / lzf / no], auto for no.
##---------for ISCE only:
mintpy.load.metaFile         = ../ISCE/reference/IW*.xml
mintpy.load.baselineDir      = ../ISCE/baselines
##---------interferogram datasets:  
mintpy.load.unwFile          = ../ISCE/merged/interferograms/*/filt_*.unw
mintpy.load.corFile          = ../ISCE/merged/interferograms/*/filt_*.cor
mintpy.load.connCompFile     = ../ISCE/merged/interferograms/*/filt_*.unw.conncomp
##---------geometry datasets:
mintpy.load.demFile          = ../ISCE/merged/geom_reference/hgt.rdr
mintpy.load.lookupYFile      = ../ISCE/merged/geom_reference/lat.rdr
mintpy.load.lookupXFile      = ../ISCE/merged/geom_reference/lon.rdr
mintpy.load.incAngleFile     = ../ISCE/merged/geom_reference/los.rdr
mintpy.load.azAngleFile      = ../ISCE/merged/geom_reference/los.rdr
mintpy.load.shadowMaskFile   = ../ISCE/geom_reference/IW3/shadowMask_0?.rdr
mintpy.load.waterMaskFile    = None
#mintpy.load.bperpFile        = $GALAPAGOS_DIR/GalapagosSenDT128/merged/baseline_grid/*/bperp.rdr
#mintpy.subset.yx             = 400:2400,0:1700
#mintpy.reference.lalo        = -0.30,-91.43
#mintpy.network.endDate       = 20180626
#mintpy.unwrapError.method                = bridging+phase_closure   #[bridging / phase_closure / no], auto for no
#mintpy.topographicResidual.stepFuncDate  = 20170910,20180613  #eruption dates
mintpy.troposphericDelay.weatherModel = ERA5  #[ERA5 / ECMWF / MERRA / NARR], auto for ERA5, for pyaps method
mintpy.deramp                = linear
mintpy.troposphericDelay.method =  pyaps #[pyaps / height_correlation / no], auto for pyaps

## 1) Coherence-based network modification = Threshold + MST, by default
## It calculates a average coherence value for each interferogram using spatial coherence and input mask (with AOI)
## Then it finds a minimum spanning tree (MST) network with inverse of average coherence as weight (keepMinSpanTree)
## For all interferograms except for MST's, exclude those with average coherence < minCoherence.
mintpy.network.coherenceBased  = no  #[yes / no], auto for no, exclude interferograms with coherence < minCoherence
mintpy.network.keepMinSpanTree = auto  #[yes / no], auto for yes, keep interferograms in Min Span Tree network
mintpy.network.minCoherence    = 0.7  #[0.0-1.0], auto for 0.7
#mintpy.network.maskFile        = waterMask.h5  #[file name, no], auto for waterMask.h5 or no [if no waterMask.h5 found]
mintpy.network.maskFile        = no  #[file name, no], auto for waterMask.h5 or no [if no waterMask.h5 found]
mintpy.network.aoiYX           = auto  #[y0:y1,x0:x1 / no], auto for no, area of interest for coherence calculation
mintpy.network.aoiLALO         = auto  #[lat0:lat1,lon0:lon1 / no], auto for no - use the whole area
mintpy.save.kmz             = yes   #[yes / no], auto for yes, save geocoded velocity to Google Earth KMZ file
mintpy.save.hdfEos5         = yes   #[yes / no], auto for no, save time-series to HDF-EOS5 format
mintpy.save.hdfEos5.update  = yes   #[yes / no], auto for no, put XXXXXXXX as endDate in output filename
mintpy.save.hdfEos5.subset  = yes   #[yes / no], auto for no, put subset range info   in output filename
mintpy.save.gmt             = yes   #[yes / no], auto for yes, save geocoded velocity to GMT grd file in NETCDF format

## Bootstrapping
## refernce: Efron and Tibshirani (1986, Stat. Sci.)
mintpy.velocity.bootstrap      = auto   #[yes / no], auto for no, use bootstrap
mintpy.velocity.bootstrapCount = auto   #[int>1], auto for 400, number of iterations for bootstrapping

########## 11.4 plot
mintpy.plot = no   #[yes / no], auto for yes, plot files generated by default processing to pic folder





